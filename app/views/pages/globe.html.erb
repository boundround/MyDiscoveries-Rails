<!DOCTYPE html>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<style>


body
/*{
padding:0px;
margin:0px;
}*/

svg {
}

#svgdiv {
	visibility: hidden;
	background-color: black;
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0px;
  top: 0px;
}

.land {
  stroke-opacity: 1;
}

.countries path {
  stroke: rgb(80, 64, 39);
  stroke-linejoin: round;
  stroke-width:1;
  fill: transparent;
}

.country {
  stroke: rgb(80, 64, 39);
  stroke-linejoin: round;
  stroke-width:1;
  fill: transparent;
}

.countries path:hover {
  stroke-width:5;
  opacity: 1;
}

.labels {
/*    font: 14px Signika;
    font-weight: 700;
    fill: white;
    opacity: .8;
*/
}

.label {
    font: 14px Signika;
    font-weight: 700;
    fill: white;
    opacity: .8;
}

.noclicks {
  pointer-events:none;
}

.point{
/*  radius: 20.;*/
  opacity: .6;
}

#zoomminus{
	position:absolute;
	top:173px;
	left:0px;
	width:28px;
	height:28px;
}
#zoomminus :hover, #zoomminus:focus, #zoomminus:active {
left: 1px;
/*top: 0;*/
}

#zoomplus{
	position:absolute;
	top:0px;
	left:0px;
	width:28px;
	height:27px;
}
#zoomplus :hover, #zoomplus:focus, #zoomplus:active {
left: 1px;
/*top: 2px;*/
}

#zoomscroller{
	position:absolute;
	top:27px;
	left:1px;
	width:26px;
	height:146px;
}

#zoomcontrol{
	background-color: transparent;
	position:absolute;
	top:10px;
	left:10px;
	width:28px;
	height:203px;
	z-index:1;
}

</style>

<body>
<div class='map-page'>
	<div id='map'></div>
</div>

<div class="search-wrapper">
	<input class="search-box"></input>
</div>

<%= render partial: 'filter_menu' %>

<div id="svgdiv">
<div id="zoomcontrol">
	<div id="zoomplus"><%=image_tag("zoomplus.png")%></div>
	<div id="zoomscroller"><%=image_tag("zoomscroller2.png")%></div>
	<div id="zoomminus"><%=image_tag("zoomminus.png")%></div>
</div>
</div>
<div class="br-corporate-link">
	<a href="http://boundround.com/new-home-demo/">
		<img class="corporate-logo" src="<%= asset_path('BR_Logo.png')%>">
	</a>
</div>

<div class="dropdown pull-right">
	<button class="dropdown-toggle fa fa-bars fa-3x map-menu-button" type="button" id="dropdownMenu1" data-toggle="dropdown">
	</button>
	<ul id="menu" class="dropdown-menu map-menu" role="menu" aria-labelledby="dropdownMenu1">
		<li role="presentation">
			<a role="menuitem" tabindex="-1" href="/" data-filter="*">
				<%= image_tag 'all_icon-02.svg', class: 'dropdown-menu-icon' %>
				Home
			</a>
		</li>
		<li role="presentation">
			<a role="menuitem" tabindex="-1" href="/videos" data-filter=".slider">
				<%= image_tag 'game_icon-slider.svg', class: 'dropdown-menu-icon', data: { filter: '.word-search'} %>
				Watch Videos
			</a>
		</li>
		<li role="presentation">
			<a role="menuitem" tabindex="-1" href="/games" data-filter=".jigsaw">
				<%= image_tag 'game_icon-01.svg', class: 'dropdown-menu-icon', data: { filter: '.word-search'} %>
				Play Games
			</a>
		</li>
		<li role="presentation">
			<a role="menuitem" tabindex="-1" href="http://boundround.com/new-home-demo/" data-filter=".word">
				<%= image_tag 'game_icon-wordsearch.svg', class: 'dropdown-menu-icon', data: { filter: '.word-search'} %>
				Corporate Site
			</a>
		</li>
	</ul>
</div>


<div class="dude-help">
	<div class="balloon-wrapper">
		<a href="#" data-toggle="modal" data-target="#helpModal">
			<div class="help-balloon">
				<div>
					<p class="balloon-dialog">Hi there!<br />Click here for the Bound Round guide.</p>
				</div>
			</div>
		</a>
	</div>
	<div class="dude-icon-wrapper">
		<%= image_tag "dude-help.png", class: "dude-help-icon" %>
	</div>
</div>

<div class="modal fade" id="helpModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-content">
		<div class="modal-body">
			<%= render '/pages/help' %>
		</div>
	</div>
	<div class="footer">
		<a class="feedback" href="mailto:help@boundround.com">Send us your feedback!</a>
	</div>
</div>

<div class="modal fade" id="navModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-content small-modal">
		<div class="modal-body">
			<h3>I Would Like To</h3>
			<div id="icon-wrapper">
				<a href="/videos">
					<div class="go-to go-to-videos">
					</div>
				</a>
				<a href="/games">
					<div class="go-to go-to-games">
					</div>
				</a>
				<a href="#">
					<div class="go-to go-to-globe">
					</div>
				</a>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="loadModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-content loadModal">
		<div class="modal-body">
			<img class="plane-orbit" src="<%= asset_path('orange_plane_orbit.png')%>">
			<p class="load-text">Loading...</p>
		<div>
	</div>
</div>

<div id='user-ip' data-ip=<%= request.remote_ip %>></div>
<!-- Google Fonts embed code -->
<script type="text/javascript">
  WebFontConfig = {
    google: { families: [ 'Signika:300:latin' ] }
  };
  (function() {
    var wf = document.createElement('script');
    wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +
      '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
    wf.type = 'text/javascript';
    wf.async = 'true';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(wf, s);
  })();
  </script>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/queue.v1.min.js"></script>
<script src="http://d3js.org/topojson.v0.min.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

<script>

// var svgdiv = "#svgdiv",
//		 width = 800,
//     height = 800,
//     scaleextent = [400,1500], the minimum and maximum zoom supported
//		 tiltextent = [30,80], tilt maximum at corresponding zoom
//     textsize = 12,
//     iconsize = 64,
//     patternsize = 128,
//     landjson = "world-110m-36-topo/world-110m-36-land.json",
//     countriesjson = "world-110m-36-topo/world-110m-36-countries.json",
//		 placesjson = "places.json",
//     includecountries = false,
//     includelabels = true;
//
// var tileimage = "green-tile"+patternsize+".png";

//Initial load of page
$(document).ready(sizeContent);

//Every resize of window
$(window).resize(sizeContent);

//Dynamically assign height
function sizeContent() {
	$("#svgdiv").width($(window).width());
	$("#svgdiv").height($(window).height());

//	$("#zoomcontrol").width(30);
//	$("#zoomcontrol").height(60);
}

</script>

<script>
//Module pattern but Singleton NOT implemented
//Include module only once
//Parameters required

// var svgdiv = "#svgdiv",
//		 width = 800,
//     height = 800,
//     scaleextent = [400,1500], the minimum and maximum zoom supported
//		 tiltextent = [30,80], tilt maximum at corresponding zoom
//     textsize = 12,
//     iconsize = 64,
//     patternsize = 128,
//     landjson = "world-110m-36-topo/world-110m-36-land.json",
//     countriesjson = "world-110m-36-topo/world-110m-36-countries.json",
//		 placesjson = "places.json",
//     includecountries = false,
//     includelabels = true;
//
// var tileimage = "green-tile"+patternsize+".png";

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['d3', 'topojson', 'queue'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('d3'), require('topojson'), require('queue'));
  } else {
    root.brglobe = factory(root.d3, root.topojson, root.queue, root);
  }
}(this, function(d3, topojson, queue, window) {

	var jscale = d3.scale.linear().domain([400,450]).range([1,1]);
	//We hardcode maximum tilt to 30 when zoom is at the minimum scale extent
	//We hardcode maximum tilt to 80 when zoom is at the maximum because it looks good?
	//We force tilt on zoom out
	var zscale = d3.scale.linear().domain([400,450]).range([30,80]);
	var qscale = {};

	zscale.clamp(true);

  function brglobe() {
  	var self = this;

	  self.configureGlobe = function(options) {
			self.svgdiv = options.svgdiv;
			self.width = options.width;
			self.height = options.height;
			self.scaleextent = options.scaleextent;
			self.zoomstep = 25.;
			self.tiltextent = options.tiltextent;
			self.textsize = options.textsize;
			self.iconsize = options.iconsize;
			self.grpiconsize = self.iconsize*2/3;
			self.patternsize = options.patternsize;
			self.landjson = options.landjson;
			self.countriesjson = options.countriesjson;
			self.placesjson = options.placesjson;
			self.includecountries = options.includecountries;
			self.includelabels = options.includelabels;
			self.tileimage = options.tileimage;
			self.hidemarkeropt = false;
      self.onMovementEnd = options.onMovementEnd;
			self.onMaxZoom = options.onMaxZoom;

			self.countryfieldname = options.countryfieldname;

			self.placefieldid = options.placefieldid;
			self.placefieldname = options.placefieldname;

			self.labelmousedown = function(d)
			{
				if(!self.zooming)
				{
//					self.onMarkerTouch(d.properties.nameascii);
					if(d.clustercount)
					{
							self.setLocation(d.geometry.coordinates[1],d.geometry.coordinates[0] );
			        $('#svgdiv').fadeOut("fast");
							var loc = self.proj.invert([self.width/2,self.height/2]);
							map.setView([loc[1], loc[0]], transitionzoomlevel+2);
							/*
							zoomlevel = qscale(self.proj.scale());
 							zoomscale = qscale.invertExtent(zoomlevel+1);
							self.setLocationZ(d.geometry.coordinates[1],d.geometry.coordinates[0],zoomscale[1] );
						  */
					}
					else {
						self.setLocation(d.geometry.coordinates[1],d.geometry.coordinates[0] );
						self.onMarkerTouch(d['properties'][self.placefieldid], d.geometry.coordinates, d.properties.places);
					}
				}
			}

			self.countrymousedown = function(d)
			{
				if(!self.zooming)
				{
					self.onCountryTouch(d['properties'][self.countryfieldname]);
				}
			}

			self.onMarkerTouch = options.onMarkerTouch;
			self.onCountryTouch = options.onCountryTouch;

			self.moving = false;
			self.zooming = false;
			self.showingmarkers = true;
			self.hidemarkers = false;

			self.projm = d3.geo.mercator()
				.scale(self.scaleextent[0])
				.translate([self.width / 2, self.height / 2]);

			self.proj = d3.geo.orthographic()
				.scale(self.scaleextent[0])
				.translate([self.width / 2, self.height / 2])
				.clipAngle(90);

			self.path = d3.geo.path().projection(self.proj).pointRadius(1.5);

			jscale = d3.scale.linear().domain(self.scaleextent).range([.9,.9]);
			zscale = d3.scale.linear().domain(self.scaleextent).range(self.tiltextent);

			self.svg = d3.select(self.svgdiv).append("svg")
				.attr("width","100%")
 				.attr("height","100%")
				.attr("viewBox","0,0,"+self.width+","+self.height);

			//Define pseudo shadow ocean fill
			var ocean_fill = self.svg.append("defs").append("radialGradient")
				.attr("id", "ocean_fill")
				.attr("cx", "75%")
				.attr("cy", "25%");
			ocean_fill.append("stop").attr("offset", "5%").attr("stop-color", "#9FEFFF");
			ocean_fill.append("stop").attr("offset", "100%").attr("stop-color", "#73C7D1");

			//Define pseudo shadow ocean fill
			var land_grad_fill = self.svg.append("defs").append("radialGradient")
				.attr("id", "land_grad_fill")
				.attr("cx", "75%")
				.attr("cy", "25%");
			land_grad_fill.append("stop").attr("offset", "5%").attr("stop-color", "#CDE2AA");
			land_grad_fill.append("stop").attr("offset", "100%").attr("stop-color", "#6CBF5D");

			//Define land fill.
			//Note, performance on desktop gets hammered if fill is > 128X128 texture
			var land_fill = self.svg.append("defs").append("pattern")
				.attr("id", "land_fill")
				.attr("patternUnits", "userSpaceOnUse")
				.attr("width", self.patternsize)
				.attr("height", self.patternsize)
				.append("image")
					.attr("id", "land_fill_img")
					.attr("xlink:href",self.tileimage)
					.attr("x","0")
					.attr("y","0")
					.attr("width",self.patternsize)
					.attr("height",self.patternsize);

			//Define group fill
			var group = self.svg.append('defs').append('pattern')
				.attr('id', 'grouppattern')
				.attr('patternUnits', 'userSpaceOnUse')
				.attr('width', self.grpiconsize)
				.attr('height', self.grpiconsize)
				.append("image")
					.attr("id", "group_img")
					.attr("xlink:href","<%= image_url('group.png') %>")
					.attr("x","0")
					.attr("y","0")
					.attr("width",self.grpiconsize)
					.attr("height",self.grpiconsize);

			//Define marker fill
			var marker = self.svg.append('defs').append('pattern')
				.attr('id', 'markerpattern')
				.attr('patternUnits', 'userSpaceOnUse')
				.attr('width', self.iconsize)
				.attr('height', self.iconsize)
				.append("image")
					.attr("id", "marker_img")
					.attr("xlink:href","<%= image_url('orange_plane.png') %>")
					.attr("x","0")
					.attr("y","0")
					.attr("width",self.iconsize)
					.attr("height",self.iconsize);

			//Fill the oceans
			self.svg.append("circle")
				.attr("id", "globecircle")
				.attr("cx", self.width / 2).attr("cy", self.height / 2)
				.attr("r", self.proj.scale())
				.attr("class", "noclicks")
		//		.style("fill", "#73C7D1");
		//Gradient fill appears to have no performance implications on Apple devices
		        .style("fill", "url(#ocean_fill)");


/****************************************************************/
			//Marker Clustering Capabilities

			// self.zoomindexes = [0,1,2,3,4,5];
//			self.zoomindexes = [0,1,2,3];
			self.zoomindexes = [0];
			qscale = d3.scale.quantize().domain(self.scaleextent).range(self.zoomindexes);

			self.resetClusteredPlaces = function() {
				self.clusteredPlaces = [];
				for(var i=0; i<self.zoomindexes.length; i++)self.clusteredPlaces.push([]);
				self.currentCluster = [];
			};

			//Determines whether an itemcluster should include the item at the idx zoom level
			//Assumes the data is geojson and has been deep copied, gonna mess with it!
			self.cluster = function(idx,itemcluster,item){

				//Compute pixel locations and the distance
				//Notice, this assumes the current projection is at the zoom level ~ idx!!
				var icloc = self.projm(itemcluster.geometry.coordinates);
				var itloc = self.projm(item.geometry.coordinates);

				var pxdist = Math.sqrt( Math.pow(icloc[0]-itloc[0],2) + Math.pow(icloc[1]-itloc[1],2) );

//				var arc = d3.geo.greatArc();
//				var d = arc.distance({source: itemcluster.geometry.coordinates, target: item.geometry.coordinates});
//				var d = d3.geo.distance(itemcluster.geometry.coordinates,item.geometry.coordinates);

				//Kinda arbitrary, weighted average position for all the relevant clusters
				if( (pxdist < self.iconsize/1.1) /*&& (d<.2)*/ )
				{
					var cc = 2;
					if(itemcluster.clustercount) cc = itemcluster.clustercount+1;

//					itemcluster.properties[self.placefieldname] += "," + item.properties[self.placefieldname];
					itemcluster.properties[self.placefieldname] = cc;
					itemcluster.clustercount = cc;
					itemcluster.geometry.coordinates[0] = ((cc-1)*itemcluster.geometry.coordinates[0] + item.geometry.coordinates[0])/cc;
					itemcluster.geometry.coordinates[1] = ((cc-1)*itemcluster.geometry.coordinates[1] + item.geometry.coordinates[1])/cc;
					return true;
				}

				//if I don't cluster, return false
				return false;
			}

			self.deepCopy = function(item){
				var copy = JSON.parse(JSON.stringify(item))
				return copy;
			}

			self.generateAllClusteredPlaces = function(){
				self.resetClusteredPlaces();
				for(var iv=0; iv<self.zoomindexes.length; ++iv){
					self.generateClusteredPlaces(self.zoomindexes[iv]);
				}
			}

			self.generateClusteredPlaces = function(idx){

				var zoom = qscale.invertExtent(idx)[0];
				self.projm.scale(zoom);

				for(var j=0; j<self.places.features.length; ++j)
				{
					var item = self.places.features[j];

					if(self.clusteredPlaces[idx].length <= 0) {
						 self.clusteredPlaces[idx].push(self.deepCopy(item));
					} else {
						var addalone = true;

						for(var i=0; i<self.clusteredPlaces[idx].length; i++)
						{
							if( self.cluster(idx,self.clusteredPlaces[idx][i],item) )
							{
								addalone = false;
								break;
							}
						}
						if(addalone)self.clusteredPlaces[idx].push(self.deepCopy(item));
					}
				}

				return self.clusteredPlaces[idx];
			}

			self.getClusteredPlaces = function(zoom){
				//Get the zoom index
				var idx = qscale(zoom);

				if(idx < self.clusteredPlaces.length && self.clusteredPlaces[idx])
					return self.clusteredPlaces[idx];
				else
				{
					return self.generateClusteredPlaces(idx);
				}
			}

/************************************************/

			self.ready = function(error, world, countries, places) {

				self.countries = countries;
				self.places = places;
        console.log(this);

        // self.zoomindexes = [0,1,2,3,4,5]
				self.generateAllClusteredPlaces();

				//Generate land
				self.svg.append("path")
					.datum(topojson.object(world, world.objects.land))
					.attr("class", "land")
					.style("fill", "url(#land_fill)")
//					.style("fill", "#A8D271")
					.attr("d", self.path);

				//Generate countries
				if(self.includecountries)
				{
					// uncomment for hover-able country outlines
					//Make this optional for mobile
					self.svg.append("g").attr("class","countries")
						.selectAll("path")
						.data(topojson.object(countries, countries.objects.countries).geometries)
						.enter()
						.append("path")
							.on("mouseup", self.countrymousedown)
							.on("touchend", self.countrymousedown)
							.attr("d", self.path);
				}


				self.zoom = d3.behavior.zoom()
					.scaleExtent(self.scaleextent)
//					.scale(self.proj.scale())
					.on('zoomstart', function(){if(self.hidemarkeropt)self.hidemarkers = true;})
					.on('zoomend', function(){if(self.hidemarkeropt){self.hidemarkers = false; self.currentCluster = null; self.refresh();}/*self.zooming = false; self.moving = false;*/ /*self.refresh();*/})
					.on('zoom', function() {

						var ts = d3.event.scale;

						self.setZoom(ts);
//						}
					});

					self.svg.call(self.zoom);

				var drag = d3.behavior.drag()
//					.on('dragstart', function() {self.hidemarkers = true;} )
//					.on('dragend', function() {self.hidemarkers = false; self.refresh();} )
					.on('drag', function() {
						if(!self.zooming)
						{
							var dx = d3.event.dx;
							var dy = d3.event.dy;

							var rotation = self.proj.rotate();
							var radius = self.proj.scale();

							var scale = d3.scale.linear()
								.domain([-1 * radius, radius])
								.range([-90, 90]);

							var degX = scale(dx);
							var degY = scale(dy);

							rotation[0] += degX;
							rotation[1] -= degY;

							var zr = zscale(self.proj.scale());
							if (rotation[1] > zr)  rotation[1] = zr;
							if (rotation[1] < -zr)  rotation[1] = -zr;
							if (rotation[0] >= 180) rotation[0] -= 360;

							self.proj.rotate(rotation);

							self.refresh();
						}
					});

				self.svg.call(drag);

				self.position_labels = function() {
					var centerPos = self.proj.invert([self.width/2,self.height/2]);

					var arc = d3.geo.greatArc();

					var ns = jscale(self.proj.scale());

					if(self.includelabels)
					{
						self.svg.selectAll(".label")
							.attr("text-anchor",function(d) {
								var x = self.proj(d.geometry.coordinates)[0];
								if(d.clustercount)
									return "middle"
								else
									return x < self.width/2-20 ? "end" :
									 x < self.width/2+20 ? "middle" :
									 "start"
							})
							.attr("transform", function(d) {
								var loc = self.proj(d.geometry.coordinates);
								if(d.clustercount)
								{
									var ics = self.grpiconsize;

									x = loc[0];//-ics/2;
									y = loc[1];//-ics/2;

									return "translate(" + (x) + "," + (y) + ")  scale("+ns+")";
								}
								else
								{
									x = loc[0];
									y = loc[1];
									var offset = x < self.width/2 ? -5 : 5;
									return "translate(" + (x+offset) + "," + (y-2) + ")  scale("+ns+")";
								}
							})
							.style("display",function(d) {
								var d = d3.geo.distance(d.geometry.coordinates,centerPos);
//								var d = arc.distance({source: d.geometry.coordinates, target: centerPos});
//								return (d > 1.57) ? 'none' : 'inline';
								return (d > 1.4) ? 'none' : 'inline';
							});
					}

					self.svg.selectAll(".rectlabel")
						.attr("text",function(d) { return d.properties[self.placefieldname] })
						.attr("transform", function(d) {
							var loc = self.proj(d.geometry.coordinates);
							var ics = self.iconsize;
							if(d.clustercount) ics = self.grpiconsize;

							x = loc[0]-ics/2;
							y = loc[1]-ics/2;
							return "translate(" + x + "," + y + ")   scale("+ns+")";
						})
						.style("display",function(d) {
							var d = arc.distance({source: d.geometry.coordinates, target: centerPos});
//							return (d > 1.57) ? 'none' : 'inline';
							return (d > 1.4) ? 'none' : 'inline';
						});

					//Simplified attempt at translating the pattern with the globe
					//Performance tradeoff

					var rotation = self.proj.rotate();
					var radius = self.proj.scale();
					var scale = d3.scale.linear()
						.domain([-64, 64])
						.range([-radius, radius]);

					self.offset_x = scale(rotation[0]);
					self.offset_y = -scale(rotation[1]);

					var trn = "translate("+self.offset_x+","+self.offset_y+")";
					document.getElementById('land_fill').setAttribute('patternTransform', trn);

				}

				//Repositions everything based on the current projection/zoom settings
				self.refresh = function() {
					self.calcMarkers();
					self.position_labels();

					self.svg.selectAll(".land").attr("d", self.path);
					self.svg.selectAll(".countries path").attr("d", self.path);
//					self.svg.selectAll(".point").attr("transform", function(d) {return "translate(" + self.path.centroid(d)+")";});
					self.svg.selectAll(".country").attr("d", self.path);
					self.svg.selectAll('#globecircle').attr("r", self.proj.scale());

          if(self.onMovementEnd)self.onMovementEnd(self.proj.invert([self.width/2,self.height/2]));
				};

				self.calcMarkers();
				self.refresh();
			}

			queue()
				.defer(d3.json, self.landjson)
				.defer(d3.json,self.countriesjson)
				.defer(d3.json, self.placesjson)
				.await(self.ready);

    	};

		self.upZoomIdx = function()
		{
			zoomlevel = qscale(self.proj.scale());
 			if(zoomlevel<self.zoomindexes.length-1)
			{
				zoomscale = qscale.invertExtent(zoomlevel+1);
 				if(zoomscale)self.setZoom( self.proj.scale()+(zoomscale[1]-zoomscale[0]) );
			}
			else if(zoomlevel==self.zoomindexes.length-1)
			{
				if(self.proj.scale() < self.scaleextent[1]-1)
 				{
 					zoomscale = qscale.invertExtent(self.zoomindexes.length-1);
 					if(zoomscale)self.setZoom( zoomscale[1]-1 );
 				}
 				else
 				{
 					self.onMaxZoom(self.proj.invert([self.width/2,self.height/2]));
 				}
			}
		}
		self.downZoomIdx = function()
		{
			zoomlevel = qscale(self.proj.scale());
 			if(zoomlevel>0)
			{
				zoomscale = qscale.invertExtent(zoomlevel-1);
 				if(zoomscale)self.setZoom( self.proj.scale()-(zoomscale[1]-zoomscale[0]) );

			}
			else
			{
				zoomscale = qscale.invertExtent(0);
 				if(zoomscale)self.setZoom( zoomscale[0]);
			}
		}


		self.setZoom = function(mapzoom)
		{
			if(mapzoom && !self.zooming)
			{
				var ts = mapzoom;
				var cs = self.proj.scale();

				if(ts<self.scaleextent[0])ts = self.scaleextent[0];
				if(ts>self.scaleextent[1]-1)
				{
					ts = self.scaleextent[1]-1;
					self.onMaxZoom(self.proj.invert([self.width/2,self.height/2]));
				}

				if(Math.abs(ts-cs) > self.zoomstep)self.zooming = true;

				if(self.zooming)
				{
					self.proj.scale(ts);
					self.zoom.scale(ts);
					self.zoomidx = qscale(ts);

					self.refresh();
					// if(ts >= self.scaleextent[1])self.onMaxZoom();
					self.zooming = false;
				}
			}
		}

		self.setLocation = function(lat, lon) {
 			self.proj.rotate([-lon,-lat]);
			self.refresh();
 		};


		self.setLocationZ = function(lat, lon, mapzoom) {
				self.proj.rotate([-lon,-lat]);
				self.setZoom(mapzoom);
		};

		self.showCountries = function(showem) {
				//Generate countries
				if(showem)
				{
					// uncomment for hover-able country outlines
					//Make this optional for mobile
					var tcountry = self.svg.selectAll(".country").data(topojson.object(self.countries, self.countries.objects.countries).geometries);

					tcountry.enter()
						.append("path")
							.attr("class","country")
							.on("mousedown", self.countrymousedown)
							.on("touchstart", self.countrymousedown)
							.attr("d", self.path);

					tcountry.exit().remove();

				}
				else
				{
					var ted = self.svg.selectAll(".country").data({});

					ted.exit().remove();
				}
		}

		self.showMarkers = function(showem) {
			self.showingmarkers = showem;
			self.calcMarkers();
		}

		self.calcMarkers = function() {

			var places = self.getClusteredPlaces(self.proj.scale());

			if(self.showingmarkers && !self.hidemarkers && (self.currentCluster != places))
			{
				self.currentCluster = places;

				//Generate markers
//					var ted= self.svg.selectAll(".rectlabel").data(places.features);
//					var joe= self.svg.selectAll(".rectlabel").data([]);
//					joe.exit().remove();

				var tlabel= self.svg.selectAll(".rectlabel").data(places);
 						tlabel.attr("class", "rectlabel")
						.attr("width", function(d) {
							if(d.clustercount > 1)
								return self.grpiconsize
							else
								return self.iconsize;
						} )
						.attr("height", function(d) {
							if(d.clustercount > 1)
								return self.grpiconsize
							else
								return self.iconsize;
						} )
						.on("mousedown", self.labelmousedown)
						.on("touchstart", self.labelmousedown)
						.style("fill", function(d) {
							if(d.clustercount > 1)
								return"url(#grouppattern)"
							else
								return"url(#markerpattern)";
						} );

					tlabel.enter()
					.append("rect")
						.attr("class", "rectlabel")
						.attr("width",function(d) {
							if(d.clustercount > 1)
								return self.grpiconsize
							else
								return self.iconsize;
						} )
						.attr("height",function(d) {
							if(d.clustercount > 1)
								return self.grpiconsize
							else
								return self.iconsize;
						} )
						.on("mousedown", self.labelmousedown)
						.on("touchstart", self.labelmousedown)
						.style("fill", function(d) {
							if(d.clustercount > 1)
								return"url(#grouppattern)"
							else
								return"url(#markerpattern)";
						} );

					tlabel.exit().remove();

				if(self.includelabels)
				{
//						ted = self.svg.selectAll(".label").data(places.features);
//						var joe= self.svg.selectAll(".label").data([]);
//						joe.exit().remove();

					tlabel = self.svg.selectAll(".label").data(places);

							tlabel.attr("class", "label")
							.on("mousedown", self.labelmousedown)
							.on("touchstart", self.labelmousedown)
							.text(function(d) { return d.properties[self.placefieldname] });

						tlabel.enter()
						.append("text")
							.attr("class", "label")
							.on("mousedown", self.labelmousedown)
							.on("touchstart", self.labelmousedown)
							.text(function(d) { return d.properties[self.placefieldname] });

						tlabel.exit().remove();
				}

			}
			else if(!self.showingmarkers || self.hidemarkers)
			{
				var tlabel = self.svg.selectAll(".label").data({});
 				tlabel.exit().remove();


				tlabel = self.svg.selectAll(".rectlabel").data({});
 				tlabel.exit().remove();

			}
		}

		self.replaceMarkers = function(jsonfile) {
			self.placesjson = jsonfile;
			queue()
				.defer(d3.json, self.placesjson)
				.await(function(error,places) { self.places = places; self.generateAllClusteredPlaces(); self.showMarkers(true); self.refresh();});
    	};

//		$('#zoomplus').on({ 'touchend' : function(){ self.upZoomIdx(); } });
//		$('#zoomminus').on({ 'touchend' : function(){ self.downZoomIdx(); } });
		$('#zoomplus').on({ 'mousedown' : function(){ self.upZoomIdx(); } });
		$('#zoomminus').on({ 'mousedown' : function(){ self.downZoomIdx(); } });

/*

- onMaxZoom(function(lat, lon, mapzoom){}) //Switch to 2d map
- getD3ZoomFromMapZoom ()  //
*/


  };

	return new brglobe();
}));
</script>

<script>
	//Parameters required by brglobe
	var options = {
			svgdiv: "#svgdiv",
			width: 800,
			height: 800,
//			scaleextent: [400,2400],
			scaleextent: [400,500],
			tiltextent: [30,80],
			textsize: 12,
			iconsize: 64,
			patternsize: 128,
			landjson: "assets/js/world-110m-36-topo/world-110m-36-land.json",
//			countriesjson: "world-110m-36-topo/world-110m-36-countries.json",
			countriesjson: "assets/js/world-110m-36-topo/world-110m-36-countries.json",
			countryfieldname: "name",
			placesjson: "/areas/mapdata.json",
//			placesjson: "oneplace.json",
			placefieldid: "url", //id to pass return in onMarkerTouch callback
			placefieldname: "title", //name to use on markers
			includecountries: false,
			includelabels: true,
      onMaxZoom: function(loc){
        $('#svgdiv').fadeOut("fast");
       	map.setView([loc[1], loc[0]], transitionzoomlevel)
      },
			onMarkerTouch: function(id, latlng, hasPlaces){
				if (hasPlaces) {
					map.setView([latlng[1], latlng[0]], transitionzoomlevel+3);
					$('#svgdiv').fadeOut("fast");
				} else {
					window.location.href = id;
					console.log(id);
      	}
			},
			onCountryTouch: function(id){alert("You pressed country id = "+id);}
	}

	options.tileimage = "<%= image_url('green-tile128.png') %>"
	brglobe.configureGlobe(options);


	//	2d		3d
	//	 3		1000 (but still a lot of curvature)
	//	 5		2400 (may be a good transition point)

	//lat, lon, zoom
/*	setTimeout(function(){brglobe.setLocation(-33.865143,151.2099,400);},3000);
	setTimeout(function(){brglobe.replaceMarkers("oneplace.json");},4000);
	setTimeout(function(){brglobe.showCountries(true);},6000);
	setTimeout(function(){brglobe.showMarkers(false);},6000);
	setTimeout(function(){brglobe.replaceMarkers("places.json");},9000);
	setTimeout(function(){brglobe.showCountries(false);},9000);
*/
</script>

</body>
